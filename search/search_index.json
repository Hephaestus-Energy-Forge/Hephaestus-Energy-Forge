{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>This is a script about Statistical Mechanics and Thermodynamics.</p>"},{"location":"1_basics_of_probability_theory/","title":"1.1 Basics of probability theory","text":"<pre>\n    import pandas\n\nfrom matplotlib import pyplot\nimport numpy as np\nimport math\nfrom scipy.optimize import curve_fit\nfrom scipy.integrate import quad\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom ipywidgets import interact, FloatSlider, Layout\n\nfrom code.common import draw_classic_axes, configure_plotting\n\nconfigure_plotting()\n  </pre> <p>We consider a random variable \\(x\\) which has a set of possible outcomes \\(S = \\{x_1, x_2, ...\\}\\). </p> <pre># Defining variables\nmu = 0\nsigma = 0.05\nsigma_range = np.arange(0.04, 0.5, 0.01)\nsigma_length = len(sigma_range)\nactive = 1\nx_range = np.linspace(-2, 2, 1000)\nlength = len(x_range)\n\n# Create figure\nfig = go.Figure()\n\ndef gauss(sigma, mu, x):\n   return (1/np.sqrt(2*math.pi*sigma**2)) * math.e**(-(x-mu)**2/(2*sigma)**2)\n\nfor current_sigma in sigma_range:\n    fig.add_trace(\n        go.Scatter(\n            visible = False,\n            x = x_range,\n            y = [gauss(current_sigma, mu, x) for x in x_range] ,\n            mode = 'lines',\n            line_color = 'blue',\n            line_dash = 'dot',\n            name = 'Gauss distribution sigma = ' + str(sigma),\n            fill = 'tonextx',\n            fillcolor = 'lightblue'\n        ))\n\nfig.update_xaxes(range=[-1, 1])\nfig.update_yaxes(range=[0, 10]) \nfig.data[active].visible = True\n\n\n# Creation of the aditional images\nsteps = []\nfor i in range(sigma_length):\n    step = dict(\n        method = \"update\",\n        args = [{\"visible\": [False] * length}],\n        value = str(sigma_range[i])\n    )\n    step[\"args\"][0][\"visible\"][i] = True\n    steps.append(step)\n\n# Creating the slider\nsliders = [dict(\n    tickcolor = 'White',\n    font_color = 'White',\n    currentvalue_font_color = 'Black',\n    active = active,\n    name = r'Standard deviation',\n    font_size = 16,\n    currentvalue = {\"prefix\": r\"Standard deviation: \"},\n    pad = {\"t\": 50},\n    steps = steps,\n)]\n\n# Updating the images for each step\nfig.update_layout(\n    sliders = sliders,\n)\n\nfor i in range(sigma_length):\n    fig['layout']['sliders'][0]['steps'][i]['label'] = ' %.2f ' % sigma_range[i]\n\n\nfig</pre> <ol> <li> <p>Data source: Wikipedia, mainly the CRC Handbook of Chemistry and Physics.\u00a0\u21a9</p> </li> <li> <p>The data in this plot is the same as what Einstein used, but the curve in this plot is improved compared to what Einstein did, see this blog post for the backstory.\u00a0\u21a9</p> </li> </ol>"}]}